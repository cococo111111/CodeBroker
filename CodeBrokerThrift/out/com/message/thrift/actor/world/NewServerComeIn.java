/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.message.thrift.actor.world;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-20")
public class NewServerComeIn implements org.apache.thrift.TBase<NewServerComeIn, NewServerComeIn._Fields>, java.io.Serializable, Cloneable, Comparable<NewServerComeIn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NewServerComeIn");

  private static final org.apache.thrift.protocol.TField SERVER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverUId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField REMOTE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("remotePath", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NewServerComeInStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NewServerComeInTupleSchemeFactory();

  public long serverUId; // required
  public java.lang.String remotePath; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVER_UID((short)1, "serverUId"),
    REMOTE_PATH((short)2, "remotePath");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVER_UID
          return SERVER_UID;
        case 2: // REMOTE_PATH
          return REMOTE_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERVERUID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVER_UID, new org.apache.thrift.meta_data.FieldMetaData("serverUId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REMOTE_PATH, new org.apache.thrift.meta_data.FieldMetaData("remotePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NewServerComeIn.class, metaDataMap);
  }

  public NewServerComeIn() {
  }

  public NewServerComeIn(
    long serverUId,
    java.lang.String remotePath)
  {
    this();
    this.serverUId = serverUId;
    setServerUIdIsSet(true);
    this.remotePath = remotePath;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NewServerComeIn(NewServerComeIn other) {
    __isset_bitfield = other.__isset_bitfield;
    this.serverUId = other.serverUId;
    if (other.isSetRemotePath()) {
      this.remotePath = other.remotePath;
    }
  }

  public NewServerComeIn deepCopy() {
    return new NewServerComeIn(this);
  }

  @Override
  public void clear() {
    setServerUIdIsSet(false);
    this.serverUId = 0;
    this.remotePath = null;
  }

  public long getServerUId() {
    return this.serverUId;
  }

  public NewServerComeIn setServerUId(long serverUId) {
    this.serverUId = serverUId;
    setServerUIdIsSet(true);
    return this;
  }

  public void unsetServerUId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERUID_ISSET_ID);
  }

  /** Returns true if field serverUId is set (has been assigned a value) and false otherwise */
  public boolean isSetServerUId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERUID_ISSET_ID);
  }

  public void setServerUIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERUID_ISSET_ID, value);
  }

  public java.lang.String getRemotePath() {
    return this.remotePath;
  }

  public NewServerComeIn setRemotePath(java.lang.String remotePath) {
    this.remotePath = remotePath;
    return this;
  }

  public void unsetRemotePath() {
    this.remotePath = null;
  }

  /** Returns true if field remotePath is set (has been assigned a value) and false otherwise */
  public boolean isSetRemotePath() {
    return this.remotePath != null;
  }

  public void setRemotePathIsSet(boolean value) {
    if (!value) {
      this.remotePath = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SERVER_UID:
      if (value == null) {
        unsetServerUId();
      } else {
        setServerUId((java.lang.Long)value);
      }
      break;

    case REMOTE_PATH:
      if (value == null) {
        unsetRemotePath();
      } else {
        setRemotePath((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVER_UID:
      return getServerUId();

    case REMOTE_PATH:
      return getRemotePath();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SERVER_UID:
      return isSetServerUId();
    case REMOTE_PATH:
      return isSetRemotePath();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NewServerComeIn)
      return this.equals((NewServerComeIn)that);
    return false;
  }

  public boolean equals(NewServerComeIn that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_serverUId = true;
    boolean that_present_serverUId = true;
    if (this_present_serverUId || that_present_serverUId) {
      if (!(this_present_serverUId && that_present_serverUId))
        return false;
      if (this.serverUId != that.serverUId)
        return false;
    }

    boolean this_present_remotePath = true && this.isSetRemotePath();
    boolean that_present_remotePath = true && that.isSetRemotePath();
    if (this_present_remotePath || that_present_remotePath) {
      if (!(this_present_remotePath && that_present_remotePath))
        return false;
      if (!this.remotePath.equals(that.remotePath))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(serverUId);

    hashCode = hashCode * 8191 + ((isSetRemotePath()) ? 131071 : 524287);
    if (isSetRemotePath())
      hashCode = hashCode * 8191 + remotePath.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NewServerComeIn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetServerUId()).compareTo(other.isSetServerUId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerUId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverUId, other.serverUId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemotePath()).compareTo(other.isSetRemotePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemotePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remotePath, other.remotePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NewServerComeIn(");
    boolean first = true;

    sb.append("serverUId:");
    sb.append(this.serverUId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remotePath:");
    if (this.remotePath == null) {
      sb.append("null");
    } else {
      sb.append(this.remotePath);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NewServerComeInStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NewServerComeInStandardScheme getScheme() {
      return new NewServerComeInStandardScheme();
    }
  }

  private static class NewServerComeInStandardScheme extends org.apache.thrift.scheme.StandardScheme<NewServerComeIn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NewServerComeIn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serverUId = iprot.readI64();
              struct.setServerUIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REMOTE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remotePath = iprot.readString();
              struct.setRemotePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NewServerComeIn struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SERVER_UID_FIELD_DESC);
      oprot.writeI64(struct.serverUId);
      oprot.writeFieldEnd();
      if (struct.remotePath != null) {
        oprot.writeFieldBegin(REMOTE_PATH_FIELD_DESC);
        oprot.writeString(struct.remotePath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NewServerComeInTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NewServerComeInTupleScheme getScheme() {
      return new NewServerComeInTupleScheme();
    }
  }

  private static class NewServerComeInTupleScheme extends org.apache.thrift.scheme.TupleScheme<NewServerComeIn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NewServerComeIn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetServerUId()) {
        optionals.set(0);
      }
      if (struct.isSetRemotePath()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetServerUId()) {
        oprot.writeI64(struct.serverUId);
      }
      if (struct.isSetRemotePath()) {
        oprot.writeString(struct.remotePath);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NewServerComeIn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.serverUId = iprot.readI64();
        struct.setServerUIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.remotePath = iprot.readString();
        struct.setRemotePathIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

