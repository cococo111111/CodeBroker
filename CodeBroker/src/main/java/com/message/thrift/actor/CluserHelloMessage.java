/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.message.thrift.actor;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-18")
public class CluserHelloMessage implements org.apache.thrift.TBase<CluserHelloMessage, CluserHelloMessage._Fields>,
		java.io.Serializable, Cloneable, Comparable<CluserHelloMessage> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"CluserHelloMessage");

	private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"serverId", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.I64, (short) 2);
	private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"state", org.apache.thrift.protocol.TType.I32, (short) 3);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CluserHelloMessageStandardSchemeFactory();
	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CluserHelloMessageTupleSchemeFactory();

	public int serverId; // required
	public long uid; // required
	/**
	 * 
	 * @see Handshake
	 */
	public Handshake state; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		SERVER_ID((short) 1, "serverId"), UID((short) 2, "uid"),
		/**
		 * 
		 * @see Handshake
		 */
		STATE((short) 3, "state");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // SERVER_ID
				return SERVER_ID;
			case 2: // UID
				return UID;
			case 3: // STATE
				return STATE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __SERVERID_ISSET_ID = 0;
	private static final int __UID_ISSET_ID = 1;
	private byte __isset_bitfield = 0;
	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.SERVER_ID,
				new org.apache.thrift.meta_data.FieldMetaData("serverId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Handshake.class)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CluserHelloMessage.class, metaDataMap);
	}

	public CluserHelloMessage() {
	}

	public CluserHelloMessage(int serverId, long uid, Handshake state) {
		this();
		this.serverId = serverId;
		setServerIdIsSet(true);
		this.uid = uid;
		setUidIsSet(true);
		this.state = state;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public CluserHelloMessage(CluserHelloMessage other) {
		__isset_bitfield = other.__isset_bitfield;
		this.serverId = other.serverId;
		this.uid = other.uid;
		if (other.isSetState()) {
			this.state = other.state;
		}
	}

	public CluserHelloMessage deepCopy() {
		return new CluserHelloMessage(this);
	}

	@Override
	public void clear() {
		setServerIdIsSet(false);
		this.serverId = 0;
		setUidIsSet(false);
		this.uid = 0;
		this.state = null;
	}

	public int getServerId() {
		return this.serverId;
	}

	public CluserHelloMessage setServerId(int serverId) {
		this.serverId = serverId;
		setServerIdIsSet(true);
		return this;
	}

	public void unsetServerId() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVERID_ISSET_ID);
	}

	/**
	 * Returns true if field serverId is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetServerId() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVERID_ISSET_ID);
	}

	public void setServerIdIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVERID_ISSET_ID, value);
	}

	public long getUid() {
		return this.uid;
	}

	public CluserHelloMessage setUid(long uid) {
		this.uid = uid;
		setUidIsSet(true);
		return this;
	}

	public void unsetUid() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUid() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
	}

	public void setUidIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
	}

	/**
	 * 
	 * @see Handshake
	 */
	public Handshake getState() {
		return this.state;
	}

	/**
	 * 
	 * @see Handshake
	 */
	public CluserHelloMessage setState(Handshake state) {
		this.state = state;
		return this;
	}

	public void unsetState() {
		this.state = null;
	}

	/**
	 * Returns true if field state is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetState() {
		return this.state != null;
	}

	public void setStateIsSet(boolean value) {
		if (!value) {
			this.state = null;
		}
	}

	public void setFieldValue(_Fields field, java.lang.Object value) {
		switch (field) {
		case SERVER_ID:
			if (value == null) {
				unsetServerId();
			} else {
				setServerId((java.lang.Integer) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			} else {
				setUid((java.lang.Long) value);
			}
			break;

		case STATE:
			if (value == null) {
				unsetState();
			} else {
				setState((Handshake) value);
			}
			break;

		}
	}

	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case SERVER_ID:
			return getServerId();

		case UID:
			return getUid();

		case STATE:
			return getState();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case SERVER_ID:
			return isSetServerId();
		case UID:
			return isSetUid();
		case STATE:
			return isSetState();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof CluserHelloMessage)
			return this.equals((CluserHelloMessage) that);
		return false;
	}

	public boolean equals(CluserHelloMessage that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_serverId = true;
		boolean that_present_serverId = true;
		if (this_present_serverId || that_present_serverId) {
			if (!(this_present_serverId && that_present_serverId))
				return false;
			if (this.serverId != that.serverId)
				return false;
		}

		boolean this_present_uid = true;
		boolean that_present_uid = true;
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (this.uid != that.uid)
				return false;
		}

		boolean this_present_state = true && this.isSetState();
		boolean that_present_state = true && that.isSetState();
		if (this_present_state || that_present_state) {
			if (!(this_present_state && that_present_state))
				return false;
			if (!this.state.equals(that.state))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + serverId;

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uid);

		hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
		if (isSetState())
			hashCode = hashCode * 8191 + state.getValue();

		return hashCode;
	}

	@Override
	public int compareTo(CluserHelloMessage other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetServerId()).compareTo(other.isSetServerId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetServerId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverId, other.serverId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetState()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("CluserHelloMessage(");
		boolean first = true;

		sb.append("serverId:");
		sb.append(this.serverId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		sb.append(this.uid);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("state:");
		if (this.state == null) {
			sb.append("null");
		} else {
			sb.append(this.state);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class CluserHelloMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
		public CluserHelloMessageStandardScheme getScheme() {
			return new CluserHelloMessageStandardScheme();
		}
	}

	private static class CluserHelloMessageStandardScheme
			extends org.apache.thrift.scheme.StandardScheme<CluserHelloMessage> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, CluserHelloMessage struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // SERVER_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.serverId = iprot.readI32();
						struct.setServerIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.uid = iprot.readI64();
						struct.setUidIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // STATE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.state = com.message.thrift.actor.Handshake.findByValue(iprot.readI32());
						struct.setStateIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, CluserHelloMessage struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
			oprot.writeI32(struct.serverId);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(UID_FIELD_DESC);
			oprot.writeI64(struct.uid);
			oprot.writeFieldEnd();
			if (struct.state != null) {
				oprot.writeFieldBegin(STATE_FIELD_DESC);
				oprot.writeI32(struct.state.getValue());
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class CluserHelloMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
		public CluserHelloMessageTupleScheme getScheme() {
			return new CluserHelloMessageTupleScheme();
		}
	}

	private static class CluserHelloMessageTupleScheme
			extends org.apache.thrift.scheme.TupleScheme<CluserHelloMessage> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, CluserHelloMessage struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetServerId()) {
				optionals.set(0);
			}
			if (struct.isSetUid()) {
				optionals.set(1);
			}
			if (struct.isSetState()) {
				optionals.set(2);
			}
			oprot.writeBitSet(optionals, 3);
			if (struct.isSetServerId()) {
				oprot.writeI32(struct.serverId);
			}
			if (struct.isSetUid()) {
				oprot.writeI64(struct.uid);
			}
			if (struct.isSetState()) {
				oprot.writeI32(struct.state.getValue());
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, CluserHelloMessage struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(3);
			if (incoming.get(0)) {
				struct.serverId = iprot.readI32();
				struct.setServerIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.uid = iprot.readI64();
				struct.setUidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.state = com.message.thrift.actor.Handshake.findByValue(iprot.readI32());
				struct.setStateIsSet(true);
			}
		}
	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}
}
